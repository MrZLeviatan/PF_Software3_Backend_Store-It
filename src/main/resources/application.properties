# ==============================
# CONFIGURACIÓN DE BASE DE DATOS
# ==============================
spring.datasource.url=jdbc:postgresql://dpg-d2vg0bh5pdvs73bd9t5g-a.oregon-postgres.render.com:5432/storeitdb
spring.datasource.username=storeit
spring.datasource.password=8StQJLXd75o3F55EH8aUIjPIYC5SNccX
spring.datasource.driver-class-name=org.postgresql.Driver

# ==============================
# CONFIGURACIÓN DE JPA / HIBERNATE
# ==============================
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true


# ===========================
# Email SMTP Configuration
# ===========================
# Dirección del servidor SMTP
smtp.host=smtp.gmail.com
# Puerto usado por el servidor SMTP
smtp.port=587
# Correo que enviará los mensajes
smtp.user=storeit377@gmail.com
# Contraseña o "App Password"
smtp.password=qwvudfazayuuefud
# Nombre que aparecerá como "remitente"
smtp.from.address=storeit377@gmail.com
# Nombre amigable que verá el usuario
smtp.from.name=Store-It! Notificaciones
# Estrategia de transporte para Simple Java Mail
smtp.transport=SMTP_TLS
# Timeouts en milisegundos para robustez de la conexión. Evitan que la app quede bloqueada indefinidamente.
smtp.timeout.connect=10000
smtp.timeout.read=15000

smtp.debug=false
smtp.trustAllHosts=false

# ===========================
# URL a modificar
# ===========================
app.verification.base-url=https://storeit-backend.onrender.com/api/auth/verificar-registro-clientes


# Tamaño máximo permitido para un solo archivo
spring.servlet.multipart.max-file-size=10MB
# Tamaño máximo permitido para toda la solicitud (suma de archivos + datos)
spring.servlet.multipart.max-request-size=10MB


# ==============================
# CONFIGURACIÓN DE GOOGLE OAUTH2
# ==============================
# ID de cliente de Google (obtenido en Google Cloud Console)
spring.security.oauth2.client.registration.google.client-id=79690855058-fojmhksrcau0tbvjlvfd10sifun3ght9.apps.googleusercontent.com
# Secreto del cliente de Google
spring.security.oauth2.client.registration.google.client-secret=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
# Ámbitos: qué datos queremos leer de Google (correo y perfil básico)
spring.security.oauth2.client.registration.google.scope=openid,profile,email
# Tipo de grant utilizado
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
# URL de redirección (Spring lo maneja automáticamente, pero debe coincidir con Google Cloud)
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/api/auth/login-google/{registrationId}

# Proveedor de Google (URIs oficiales de OAuth2/OIDC)
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://openidconnect.googleapis.com/v1/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub


# ==============================
# CONFIGURACIÓN CLOUDINARY
# ==============================
cloudinary.cloud-name=dehltwwbu
cloudinary.api-key=865695595729285
cloudinary.api-secret=PS-QnK8m8_wUBW0-QFXI1OAhzEg


# Habilitar todos los endpoints de Actuator
management.endpoints.web.exposure.include=*

# Cambiar el path base de los endpoints de actuator (opcional)
management.endpoints.web.base-path=/actuator

# Habilitar el endpoint de Prometheus
management.endpoint.prometheus.enabled=true



